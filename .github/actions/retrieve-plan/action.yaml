name: Retrieve Plan

inputs:
  component:
    description: "The name of the component to apply"
    required: true
  stack:
    description: "The stack name for the given component"
    required: true
  sha:
    description: "Commit SHA to apply"
    required: true
    default: "${{ github.sha }}"
  atmos-version:
    description: "The version of atmos"
    required: false
    default: ">= 1.63.0"
  atmos-config-path:
    description: "The path to the atmos.yaml configuration file"
    required: true
  token:
    description:
      Used to pull node distributions for Atmos from Cloud Posse's GitHub repository. Since there's a default, this is typically
      not supplied by the user. When running this action on github.com, the default value is sufficient. When running on
      GHES, you can pass a personal access token for github.com if you are experiencing rate limiting.
    default: ${{ github.server_url == 'https://github.com' && github.token || '' }}

outputs:
  exists:
    description: "Whether or not a plan exists for the given input"
    value: ${{ steps.plan_status.exists }}

runs:
  using: composite
  steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Set atmos cli config path vars
      shell: bash
      run: |-
        echo "ATMOS_CLI_CONFIG_PATH=$(realpath ${{ inputs.atmos-config-path }})" >> $GITHUB_ENV

    - name: Install Atmos
      uses: cloudposse/github-action-setup-atmos@v2
      with:
        atmos-version: ${{ inputs.atmos-version }}
        token: ${{ inputs.token }}
        install-wrapper: false

    - name: Find component path
      uses: cloudposse/github-action-atmos-get-setting@v1
      id: component-path
      with:
        component: ${{ inputs.component }}
        stack: ${{ inputs.stack }}
        settings-path: component_info.component_path

    - name: Gather Configuration
      shell: bash
      id: config
      run: |-
        echo "aws-region=$(atmos describe config -f json | jq -r '.integrations.github.gitops["artifact-storage"].region')" >> $GITHUB_OUTPUT
        echo "terraform-state-table=$(atmos describe config -f json | jq -r '.integrations.github.gitops["artifact-storage"].table')" >> $GITHUB_OUTPUT
        echo "terraform-state-bucket=$(atmos describe config -f json | jq -r '.integrations.github.gitops["artifact-storage"].bucket')" >> $GITHUB_OUTPUT
        echo "terraform-state-role=$(atmos describe config -f json | jq -r '.integrations.github.gitops["artifact-storage"].role')" >> $GITHUB_OUTPUT

        STACK_NAME=$(echo "${{ inputs.stack }}" | sed 's#/#_#g')
        COMPONENT_PATH=${{ steps.component-path.outputs.value }}
        COMPONENT_NAME=$(echo "${{ inputs.component }}" | sed 's#/#_#g')
        COMPONENT_SLUG="$STACK_NAME-$COMPONENT_NAME"
        PLAN_FILE="$( realpath ${COMPONENT_PATH})/$COMPONENT_SLUG-${{ inputs.sha }}.planfile"
        echo "plan_file=$PLAN_FILE" >> $GITHUB_OUTPUT

    - name: Configure State AWS Credentials
      uses: aws-actions/configure-aws-credentials@v4.0.2
      with:
        aws-region: ${{ steps.config.outputs.aws-region }}
        role-to-assume: ${{ steps.config.outputs.terraform-state-role }}
        role-session-name: "atmos-terraform-state-gitops"
        mask-aws-account-id: "no"

    - name: Retrieve Plan
      uses: cloudposse/github-action-terraform-plan-storage@v1
      id: retrieve-plan
      continue-on-error: true
      with:
        action: getPlan
        planPath: ${{ steps.config.outputs.plan_file }}
        commitSHA: ${{ inputs.sha }}
        component: ${{ inputs.component }}
        stack: ${{ inputs.stack }}
        tableName: ${{ steps.config.outputs.terraform-state-table }}
        bucketName: ${{ steps.config.outputs.terraform-state-bucket }}

    - name: Determine Whether or Not Plan Exists
      id: plan_status
      shell: bash
      run: |
        file="${{ steps.vars.outputs.plan_file }}.json"
        if [ -s "$file" ]; then
          echo "Plan exists!"
          echo "exists=true" >> $GITHUB_OUTPUT
        else
          echo "Plan does not exist!"
          echo "exists=false" >> $GITHUB_OUTPUT
        fi
