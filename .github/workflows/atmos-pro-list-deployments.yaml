name: ðŸ‘½ Atmos Pro List instances
run-name: list instances

on:
  schedule:
    - cron: '0 0 * * *'
  workflow_dispatch:

# Avoid running the same stack in parallel mode (from different workflows)
# This applied to across workflows to both plan and apply
concurrency:
  group: ${{ github.workflow }}
  cancel-in-progress: false

permissions:
  id-token: write # This is required for requesting the JWT
  contents: read  # This is required for actions/checkout

jobs: 
  atmos-list-instances:
    name: list instances

    runs-on:
      - "ubuntu-latest"

    steps:
      - uses: unfor19/install-aws-cli-action@v1

      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set atmos cli config path vars
        shell: bash
        run: |-
          echo "ATMOS_CLI_CONFIG_PATH=$(realpath ${{ vars.ATMOS_CONFIG_PATH }})" >> $GITHUB_ENV

      - name: Install Atmos
        uses: cloudposse/github-action-setup-atmos@v2
        with:
          atmos-version: ${{ vars.ATMOS_VERSION }}
          token: ${{ github.token }}
          install-wrapper: false

      # We need to assume AWS credentials to read the Terraform state 
      # Get the AWS region and the Terraform role to assume from the Atmos stack settings
      - name: Get Atmos Stack Values
        id: atmos-settings
        uses: cloudposse/github-action-atmos-get-setting@v2
        with:
          process-templates: 'false'
          process-functions: 'false'
          settings: |
            - component: ${{ matrix.component }}
              stack: ${{ matrix.stack }}
              settingsPath: settings.integrations.github.region
              outputPath: aws-region
            - component: ${{ matrix.component }}
              stack: ${{ matrix.stack }}
              settingsPath: settings.integrations.github.gitops.role.plan
              outputPath: terraform-role

      - name: Assume AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4.0.2
        with:
          aws-region: ${{ fromJson(steps.atmos-settings.outputs.settings).aws-region }}
          role-to-assume: ${{ fromJson(steps.atmos-settings.outputs.settings).terraform-role }}
          role-session-name: "atmos-list-deployments-${{ github.run_id }}"
          mask-aws-account-id: "no"

      - name: List instances and upload to Atmos Pro
        env:
          ATMOS_PRO_WORKSPACE_ID: ${{ vars.ATMOS_PRO_WORKSPACE_ID }}
        run: |
          atmos list instances \
            --upload \
            --logs-level Debug